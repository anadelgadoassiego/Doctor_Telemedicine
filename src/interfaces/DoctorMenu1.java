/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import pojos.Ecg;
import pojos.Emg;
import pojos.Patient;
import static utils.InputOutput.getStringFromKeyboard;

/**
 *
 * @author gustavo
 */
public class DoctorMenu1 extends javax.swing.JFrame {
    public static String response = new String("");
    private static InputStream inputStream2;
    private static OutputStream outputStream2;
    private static DataInputStream dint2;
    private static DataOutputStream dout2;
    public static Socket socket2 = CreateLoginInterface.socket;
    public static ObjectInputStream objectInputStream;
    public static ObjectInputStream objectInputStream2;
    public static List<Integer> values_int_public = new ArrayList();
    public static int id = 0;
    
    /**
     * Creates new form DoctorMenu
     */
    public DoctorMenu1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        patbyname = new javax.swing.JButton();
        emg = new javax.swing.JButton();
        ecg = new javax.swing.JButton();
        form = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        username = new javax.swing.JButton();
        password = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Hi Doc! What would you like to do?");

        patbyname.setText("Search patient by name");
        patbyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patbynameActionPerformed(evt);
            }
        });

        emg.setText("Search EMG by name");
        emg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emgActionPerformed(evt);
            }
        });

        ecg.setText("Search ECG by name");
        ecg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecgActionPerformed(evt);
            }
        });

        form.setText("Search Clinical Trial by name");
        form.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formActionPerformed(evt);
            }
        });

        delete.setText("Delete patient");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        username.setText("Change username");
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        password.setText("Change password");
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        back.setText("Go back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete)
                            .addComponent(form)
                            .addComponent(username)
                            .addComponent(password)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patbyname)
                            .addComponent(jLabel1)
                            .addComponent(emg)
                            .addComponent(ecg))))
                .addContainerGap(135, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(back)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(patbyname)
                .addGap(18, 18, 18)
                .addComponent(emg)
                .addGap(18, 18, 18)
                .addComponent(ecg)
                .addGap(18, 18, 18)
                .addComponent(form)
                .addGap(18, 18, 18)
                .addComponent(delete)
                .addGap(18, 18, 18)
                .addComponent(username)
                .addGap(18, 18, 18)
                .addComponent(password)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(back)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ecgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecgActionPerformed
        try {
            // TODO add your handling code here:
            values_int_public = null;
            int entero = 3;
            dout2.writeInt(entero);
            
            List<Patient> patientList = new ArrayList <Patient>();
            Object tmp_ecg;
            while ((tmp_ecg = objectInputStream.readObject()) != null) {
                Patient patient = (Patient) tmp_ecg;
                patientList.add(patient);
            }
            int patient_id = 0;
            if (!patientList.isEmpty()) {
                for (Patient patient : patientList) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, patient);
                }
                String name = JOptionPane.showInputDialog("Enter the name of the patient you want to search: ");
                for (Patient patient : patientList) {
                    if (patient.getFull_name().contains(name)) {
                        DoctorMenu1 p = new DoctorMenu1();
                        JOptionPane.showMessageDialog(p, patient);
                    }
                }
                List<Integer> ids_patients = new ArrayList();
                
                for (Patient patient : patientList) {
                    ids_patients.add(patient.getId());
                }
                do {
                    patient_id = Integer.parseInt(JOptionPane.showInputDialog("Enter the id of the patient you want to see the emg: "));
                } while (!ids_patients.contains(patient_id));
                
            } else {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "You do not have patients");
            }
            dout2.writeInt(patient_id);
            List<Ecg> ecgList = new ArrayList <Ecg>();
            Object tmp_ecgList;
            while ((tmp_ecgList = objectInputStream.readObject()) != null) {
                Ecg ecg = (Ecg) tmp_ecgList;
                ecgList.add(ecg);
            }
            boolean found = false;
            String month = JOptionPane.showInputDialog("Introduce the month: ");
            String day = JOptionPane.showInputDialog("Introduce the day: ");
            String name_ecg = month + day;
            String name_select;
            for (Ecg ecg : ecgList) {
                name_select = ecg.getName_ecg();
                if (name_select.contains(name_ecg)) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, name_select);
                }
            }
            
            int position = Integer.parseInt(JOptionPane.showInputDialog("Introduce the number of the EMG: "));
            name_ecg = "ECG_" + month + day + "_" + position + ".txt";
            for (Ecg ecg : ecgList) {
                name_select = ecg.getName_ecg();
                if (name_select.equals(name_ecg)) {
                    //print form of ecg
                    byte[] form = ecg.getForm();
                    List<String> values_f = new ArrayList();
                    String pasar_f = "";
                    for (int i = 0; i < (form.length) - 1; i++) {
                        char value_f = (char) form[i];
                        int compare_f = (int) form[i];
                        while (compare_f != 10) {
                            value_f = (char) form[i];
                            compare_f = (int) form[i];
                            if (compare_f != 10) {
                                pasar_f = pasar_f + value_f;
                                i++;
                            }
                            
                        }
                        values_f.add(pasar_f);
                        pasar_f = "";
                        
                    }
                    for (String value_f : values_f) {
                        DoctorMenu1 p = new DoctorMenu1();
                        JOptionPane.showMessageDialog(p, value_f);
                    }
                    
                    //print values of ecg
                    DoctorMenu1 p = new DoctorMenu1();
                    //JOptionPane.showMessageDialog(p, ecg);
                    found = true;
                    byte[] ecg_values = ecg.getPatient_ecg();
                    List<String> values = new ArrayList();
                    List<Integer> values_int = new ArrayList();
                    String pasar = "";
                    for (int i = 0; i < (ecg_values.length) - 1; i++) {
                        char value = (char) ecg_values[i];
                        int compare = (int) ecg_values[i];
                        while (compare != 10) {
                            value = (char) ecg_values[i];
                            compare = (int) ecg_values[i];
                            if (compare != 10) {
                                pasar = pasar + value;
                                i++;
                            }
                            
                        }
                        values.add(pasar);
                        pasar = "";
                        
                    }
                    
                    for (int i = 1; i < (values.size()) - 1; i++) {
                        values_int.add(Integer.parseInt(values.get(i)));
                        
                    }
                    values_int_public = values_int;
                    Graficas_ECG graficar = new Graficas_ECG();
                    graficar.setVisible(true);
                }
            }
            if (!found) {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "It does not exist ");
            }
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
    DoctorMenu1 p = new DoctorMenu1();
    p.setVisible(true);
    this.setVisible(false);    
    

            
    }//GEN-LAST:event_ecgActionPerformed

    private void patbynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patbynameActionPerformed
        try {
            // TODO add your handling code here:
            
            //dint2 = new DataInputStream(inputStream2);
            int entero = 1;
            dout2.writeInt(entero);
           
            Object tmp;
            List<Patient> patientList = new ArrayList <Patient>();
            while ((tmp = objectInputStream.readObject()) != null) {
                Patient patient = (Patient) tmp;
                patientList.add(patient);
            }
            if (!patientList.isEmpty()) {
            for (Patient patient : patientList) {
                
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, patient);
            }
            String name = JOptionPane.showInputDialog("Enter the name of the patient you want to search: ");
            for (Patient patient : patientList) {
                if (patient.getFull_name().contains(name)) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, patient);
                }
            }

            } else {
            DoctorMenu1 p = new DoctorMenu1();
            JOptionPane.showMessageDialog(p, "There are no patients with that name.");

        }
            
            
            
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_patbynameActionPerformed

    private void formActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formActionPerformed
        try {
            // TODO add your handling code here:
            
            //dint2 = new DataInputStream(inputStream2);
            int entero = 4;
            dout2.writeInt(entero);
            
            Object tmp;
            List<Patient> patientList = new ArrayList <Patient>();
            while ((tmp = objectInputStream.readObject()) != null) {
                Patient patient = (Patient) tmp;
                patientList.add(patient);
            }    
                
            int patient_id = 0;
            if (!patientList.isEmpty()) {
                for (Patient patient2 : patientList) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, patient2);
                }
                String name = JOptionPane.showInputDialog("Enter the name of the patient you want to search: ");
                for (Patient patient2 : patientList) {
                    if (patient2.getFull_name().contains(name)) {
                        DoctorMenu1 p = new DoctorMenu1();
                        JOptionPane.showMessageDialog(p, patient2);
                    }
                }
                patient_id = Integer.parseInt(JOptionPane.showInputDialog("Enter the id of the patient you want to search the form: "));

            } else {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "You do not have patients");
            }
            
            dout2.writeInt(patient_id);
            Patient patient_form = (Patient) objectInputStream.readObject();
            byte[] form = patient_form.getPatient_form();
            List<String> values = new ArrayList();
            String pasar = "";
            for (int i = 0; i < (form.length) - 1; i++) {
                char value = (char) form[i];
                int compare = (int) form[i];
                while (compare != 10) {
                    value = (char) form[i];
                    compare = (int) form[i];
                    if (compare != 10) {
                        pasar = pasar + value;
                        i++;
                    }

                }
                values.add(pasar);
                pasar = "";

            }
            for (String value : values) {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, value);
            }
                
            
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_formActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
        try{
       
        int entero = 7;
        dout2.writeInt(entero);
        String okay;
        String password = JOptionPane.showInputDialog("Introduce your new Password");
        dout2.writeUTF(password);
        okay = dint2.readUTF();
        if (okay.equals("Action Completed")){
            DoctorMenu1 p = new DoctorMenu1();
            JOptionPane.showMessageDialog(p, "Action completed!");
        } else {
            DoctorMenu1 p = new DoctorMenu1();
            JOptionPane.showMessageDialog(p, "Can not be completed!");
        }
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_passwordActionPerformed

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
        try{
        
        int entero = 6;
        dout2.writeInt(entero);
        String okay;
        String password = JOptionPane.showInputDialog("Introduce your new UserName");
        dout2.writeUTF(password);
        okay = dint2.readUTF();
        if (okay.equals("Action Completed")){
            DoctorMenu1 p = new DoctorMenu1();
            JOptionPane.showMessageDialog(p, "Action completed!");
        } else {
            DoctorMenu1 p = new DoctorMenu1();
            JOptionPane.showMessageDialog(p, "Can not be completed!");
        }
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_usernameActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {
            // TODO add your handling code here:
            
            int entero = 5;
            dout2.writeInt(entero);
            
            Object tmp;
            List<Patient> patientList = new ArrayList <Patient>();
            while ((tmp = objectInputStream.readObject()) != null) {
                Patient patient = (Patient) tmp;
                patientList.add(patient);
            }
            int patient_id = 0;
            if (!patientList.isEmpty()) {
                for (Patient patient : patientList) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, patient);
                }
                String name = JOptionPane.showInputDialog("Enter the name of the patient you want to search: ");
                for (Patient patient : patientList) {
                    if (patient.getFull_name().contains(name)) {
                        DoctorMenu1 p = new DoctorMenu1();
                        JOptionPane.showMessageDialog(p, patient);
                    }
                }
            patient_id = Integer.parseInt(JOptionPane.showInputDialog("Enter the id of the patient you want to delete: "));

            } else {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "You do not have this patient");
            }
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_deleteActionPerformed

    private void emgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emgActionPerformed
        try {
            // TODO add your handling code here:
            values_int_public = null;
            
            int entero = 2;
            dout2.writeInt(entero);
            
            
            List<Patient> patientList = new ArrayList <Patient>();
            Object tmp_emg;
            while ((tmp_emg = objectInputStream.readObject()) != null) {
                Patient patient = (Patient) tmp_emg;
                patientList.add(patient);
            }
            int patient_id = 0;
            if (!patientList.isEmpty()) {
            for (Patient patient : patientList) {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, patient);
            }
            String name = JOptionPane.showInputDialog("Enter the name of the patient you want to search: ");
            for (Patient patient : patientList) {
                if (patient.getFull_name().contains(name)) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, patient);
                }
            }
            List<Integer> ids_patients = new ArrayList();
            
            for (Patient patient : patientList) {
                ids_patients.add(patient.getId());
            }
            do {
                patient_id = Integer.parseInt(JOptionPane.showInputDialog("Enter the id of the patient you want to see the emg: "));
            } while (!ids_patients.contains(patient_id));

            } else {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "You do not have patients");
            }
            
            dout2.writeInt(patient_id);
            List<Emg> emgList = new ArrayList <Emg>();
            Object tmp_emgList;
            while ((tmp_emgList = objectInputStream.readObject()) != null) {
                Emg emg = (Emg) tmp_emgList;
                emgList.add(emg);
            }
            
            boolean found = false;
            String month = JOptionPane.showInputDialog("Introduce the month: ");
            String day = JOptionPane.showInputDialog("Introduce the day: ");

            String name_emg = month + day;
            String name_select;
            for (Emg emg : emgList) {
                name_select = emg.getName_emg();
                if (name_select.contains(name_emg)) {
                    DoctorMenu1 p = new DoctorMenu1();
                    JOptionPane.showMessageDialog(p, name_select);
                }
            }

            int position = Integer.parseInt(JOptionPane.showInputDialog("Introduce the number of the EMG: "));
            name_emg = "EMG_" + month + day + "_" + position + ".txt";
            for (Emg emg : emgList) {
                name_select = emg.getName_emg();
                if (name_select.equals(name_emg)) {
                    //print form of emg
                    byte[] form = emg.getForm();
                    List<String> values_f = new ArrayList();
                    String pasar_f = "";
                    for (int i = 0; i < (form.length) - 1; i++) {
                        char value_f = (char) form[i];
                        int compare_f = (int) form[i];
                        while (compare_f != 10) {
                            value_f = (char) form[i];
                            compare_f = (int) form[i];
                            if (compare_f != 10) {
                                pasar_f = pasar_f + value_f;
                                i++;
                            }

                        }
                        values_f.add(pasar_f);
                        pasar_f = "";

                    }
                    for (String value_f : values_f) {
                        DoctorMenu1 p = new DoctorMenu1();
                        JOptionPane.showMessageDialog(p, value_f);
                    }

                    //print values of emg
                    found = true;
                    byte[] emg_values = emg.getPatient_emg();
                    List<String> values = new ArrayList();
                    List<Integer> values_int = new ArrayList();
                    String pasar = "";
                    

                    for (int i = 0; i < (emg_values.length) - 1; i++) {
                        char value = (char) emg_values[i];
                        int compare = (int) emg_values[i];
                        while (compare != 10) {
                            value = (char) emg_values[i];
                            compare = (int) emg_values[i];
                            if (compare != 10) {
                                pasar = pasar + value;
                                i++;
                            }

                        }
                        values.add(pasar);
                        pasar = "";

                    }
                    DoctorMenu1 p = new DoctorMenu1();
                    //JOptionPane.showMessageDialog(p, values.toString());
                    for (int i = 1; i < (values.size()) - 1; i++) {
                        values_int.add(Integer.parseInt(values.get(i)));
                    }
                    values_int_public = values_int;
                    Graficas_ECG graficar = new Graficas_ECG();
                    graficar.setVisible(true);
                }
            }
            if (!found) {
                DoctorMenu1 p = new DoctorMenu1();
                JOptionPane.showMessageDialog(p, "It does not exist");
            }

    }
         catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        DoctorMenu1 p = new DoctorMenu1();
        p.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_emgActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        CreateLoginInterface c = new CreateLoginInterface();
        c.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main() {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(DoctorMenu1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(DoctorMenu1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(DoctorMenu1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(DoctorMenu1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            //</editor-fold>
        
            outputStream2 = socket2.getOutputStream();
            dout2 = new DataOutputStream(outputStream2);
            inputStream2 = socket2.getInputStream();
            dint2 = new DataInputStream(inputStream2);
            objectInputStream = new ObjectInputStream(inputStream2);
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    
                    
                    new DoctorMenu1().setVisible(true);
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(DoctorMenu1.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton delete;
    private javax.swing.JButton ecg;
    private javax.swing.JButton emg;
    private javax.swing.JButton form;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton password;
    private javax.swing.JButton patbyname;
    private javax.swing.JButton username;
    // End of variables declaration//GEN-END:variables
}
